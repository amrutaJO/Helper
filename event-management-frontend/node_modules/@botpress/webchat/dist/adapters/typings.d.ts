type ValueOf<T> = T[keyof T];
export type MessagesOf<M extends {
    type: string;
}> = {
    [Type in M['type']]: Extract<M, {
        type: Type;
    }>;
};
export type Adapter<A extends Record<string, object>, B extends Record<string, object>> = {
    [Type in keyof A]: (message: A[Type]) => ValueOf<B>;
};
export {};
