import * as target from '../target';
import * as webchat from '../webchat';
import * as types from '../typings';
export type WebchatToTargetAdapters = types.Adapter<webchat.Messages, target.AdaptersOutput>;
export declare const audioAdapter: (webchatMessage: {
    type: "audio";
    audioUrl: string;
    className?: string | undefined;
}) => {
    payload: {
        type: "audio";
        url: string;
    };
};
export declare const cardAdapter: (webchatMessage: {
    type: "card";
    title: string;
    actions: {
        value: string;
        action: "postback" | "url" | "say";
        label: string;
    }[];
    className?: string | undefined;
    subtitle?: string | undefined;
    imageUrl?: string | undefined;
}) => {
    payload: Omit<target.BubbleMessage, "block"> & {
        block: target.ColumnMessage;
    };
};
export declare const carouselAdapter: (webchatMessage: {
    type: "carousel";
    items: {
        title: string;
        actions: {
            value: string;
            action: "postback" | "url" | "say";
            label: string;
        }[];
        imageUrl?: string | undefined;
        subtitle?: string | undefined;
        className?: string | undefined;
    }[];
    className?: string | undefined;
}) => {
    payload: {
        type: "carousel";
        blocks: target.ColumnMessage[];
    };
};
export declare const choiceAdapter: (webchatMessage: {
    type: "choice";
    text: string;
    options: {
        value: string;
        label: string;
    }[];
    disableFreeText?: boolean | undefined;
    className?: string | undefined;
}) => {
    disableInput: boolean | undefined;
    payload: target.Message;
};
export declare const dropdownAdapter: (webchatMessage: {
    type: "dropdown";
    text: string;
    options: {
        value: string;
        label: string;
    }[];
    className?: string | undefined;
}) => {
    disableInput: true;
    payload: Omit<target.BubbleMessage, "block"> & {
        block: target.ColumnMessage;
    };
};
export declare const fileAdapter: (webchatMessage: {
    type: "file";
    fileUrl: string;
    title?: string | undefined;
    className?: string | undefined;
}) => {
    payload: {
        type: "file";
        className?: string | undefined;
        avatarUrl?: string | undefined;
        title?: string | undefined;
        url: string;
    };
};
export declare const imageAdapter: (webchatMessage: {
    type: "image";
    imageUrl: string;
    className?: string | undefined;
}) => {
    payload: {
        type: "image";
        url: string;
    };
};
export declare const locationAdapter: (webchatMessage: {
    type: "location";
    latitude: number;
    longitude: number;
    title?: string | undefined;
    address?: string | undefined;
    className?: string | undefined;
}) => {
    payload: {
        type: "location";
        latitude: number;
        longitude: number;
        title: string;
    };
};
export declare const markdownAdapter: (webchatMessage: {
    type: "markdown";
    markdown: string;
    className?: string | undefined;
}) => {
    payload: Omit<target.BubbleMessage, "block"> & {
        block: {
            type: "text";
            text: string;
        };
    };
};
export declare const textAdapter: (webchatMessage: {
    type: "text";
    text: string;
    className?: string | undefined;
}) => {
    payload: Omit<target.BubbleMessage, "block"> & {
        block: {
            type: "text";
            text: string;
        };
    };
};
export declare const videoAdapter: (webchatMessage: {
    type: "video";
    videoUrl: string;
    className?: string | undefined;
}) => {
    payload: {
        type: "video";
        url: string;
    };
};
export declare const blocAdapter: (webchatMessage: {
    type: "bloc";
    items: ({
        type: "text";
        payload: {
            text: string;
        };
    } | {
        type: "markdown";
        payload: {
            markdown: string;
        };
    } | {
        type: "image";
        payload: {
            imageUrl: string;
        };
    } | {
        type: "audio";
        payload: {
            audioUrl: string;
        };
    } | {
        type: "video";
        payload: {
            videoUrl: string;
        };
    } | {
        type: "file";
        payload: {
            fileUrl: string;
            title?: string | undefined;
        };
    } | {
        type: "location";
        payload: {
            latitude: number;
            longitude: number;
            address?: string | undefined;
            title?: string | undefined;
        };
    })[];
    className?: string | undefined;
}) => {
    payload: target.ColumnMessage;
};
export declare const messageAdapter: (message: webchat.Message) => target.AdapterOutput;
