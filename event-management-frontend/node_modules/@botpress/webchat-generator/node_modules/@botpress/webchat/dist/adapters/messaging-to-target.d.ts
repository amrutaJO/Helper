import * as adapters from 'webchat-adapters';
import * as target from './target';
type WithBubble<T extends target.Message> = target.BubbleOf<T>;
export type MessagingToTargetAdapters = adapters.Adapter<adapters.messaging.Messages, target.AdaptersOutput>;
export declare const audioAdapter: ({ type, audio }: {
    type: "audio";
    audio: string;
    className?: string | undefined;
    title?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "audio";
        url: string;
    };
};
export declare const cardAdapter: (card: {
    type: "card";
    title: string;
    actions: ({
        title: string;
        text: string;
        action: "Say something";
    } | {
        title: string;
        action: "Open URL";
        url: string;
    } | {
        title: string;
        action: "Postback";
        payload: string;
    })[];
    className?: string | undefined;
    subtitle?: string | undefined;
    image?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: WithBubble<target.ColumnMessage>;
};
export declare const carouselAdapter: ({ items }: {
    type: "carousel";
    items: {
        type: "card";
        title: string;
        actions: ({
            title: string;
            text: string;
            action: "Say something";
        } | {
            title: string;
            action: "Open URL";
            url: string;
        } | {
            title: string;
            action: "Postback";
            payload: string;
        })[];
        className?: string | undefined;
        subtitle?: string | undefined;
        image?: string | undefined;
        avatarUrl?: string | undefined;
    }[];
    className?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "carousel";
        blocks: target.ColumnMessage[];
    };
};
export declare const choiceAdapter: (x: {
    type: "single-choice";
    text: string;
    choices: {
        value: string;
        title: string;
    }[];
    className?: string | undefined;
    disableFreeText?: boolean | undefined;
    avatarUrl?: string | undefined;
}) => {
    disableInput: boolean | undefined;
    payload: target.Message;
};
export declare const dropdownAdapter: (x: {
    type: "dropdown";
    options: {
        value: string;
        label: string;
    }[];
    message?: string | undefined;
    className?: string | undefined;
    text?: string | undefined;
    markdown?: boolean | undefined;
    avatarUrl?: string | undefined;
    allowCreation?: boolean | undefined;
    placeholderText?: string | undefined;
    allowMultiple?: boolean | undefined;
    buttonText?: string | undefined;
    width?: number | undefined;
    displayInKeyboard?: boolean | undefined;
}) => {
    disableInput: true;
    payload: WithBubble<target.ColumnMessage>;
};
export declare const fileAdapter: ({ file, ...props }: {
    type: "file";
    file: string;
    className?: string | undefined;
    title?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "file";
        className?: string | undefined;
        title?: string | undefined;
        avatarUrl?: string | undefined;
        url: string;
    };
};
export declare const imageAdapter: ({ type, image }: {
    type: "image";
    image: string;
    className?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "image";
        url: string;
    };
};
export declare const locationAdapter: ({ type, latitude, longitude, title, address }: {
    type: "location";
    latitude: number;
    longitude: number;
    className?: string | undefined;
    title?: string | undefined;
    address?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "location";
        latitude: number;
        longitude: number;
        title: string;
    };
};
export declare const quickReplyAdapter: ({ text, payload }: {
    type: "quick_reply";
    text: string;
    payload?: string | undefined;
}) => {
    payload: {
        type: "text";
        text: string;
    };
};
export declare const textAdapter: ({ type, text }: {
    type: "text";
    text: string;
    className?: string | undefined;
    markdown?: boolean | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: WithBubble<{
        type: "text";
        text: string;
    }>;
};
export declare const videoAdapter: ({ type, video }: {
    type: "video";
    video: string;
    className?: string | undefined;
    title?: string | undefined;
    avatarUrl?: string | undefined;
}) => {
    payload: {
        type: "video";
        url: string;
    };
};
export declare const messageAdapter: (message: adapters.messaging.Message) => target.AdapterOutput;
export {};
