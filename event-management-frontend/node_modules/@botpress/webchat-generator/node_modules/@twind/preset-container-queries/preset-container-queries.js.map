{"version":3,"file":"preset-container-queries.js","sources":["../src/container-queries.ts"],"sourcesContent":["import { DEV } from 'distilt/env'\nimport {\n  arbitrary,\n  AutocompleteProvider,\n  BaseTheme,\n  parseValue,\n  Preset,\n  RuleResolver,\n  VariantResolver,\n  withAutocomplete,\n} from '@twind/core'\n\nexport interface ContainerQueriesTheme extends BaseTheme {\n  containers: Record<string, string>\n}\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$<\n  Resolver extends RuleResolver<ContainerQueriesTheme> | VariantResolver<ContainerQueriesTheme>,\n>(resolver: Resolver, autocomplete: AutocompleteProvider<ContainerQueriesTheme> | false): Resolver {\n  if (DEV) {\n    return withAutocomplete(\n      resolver as RuleResolver<ContainerQueriesTheme>,\n      autocomplete,\n    ) as Resolver\n  }\n\n  return resolver\n}\n\nexport default function presetContainerQueries(): Preset<ContainerQueriesTheme> {\n  return {\n    theme: {\n      containers: {\n        xs: '20rem',\n        sm: '24rem',\n        md: '28rem',\n        lg: '32rem',\n        xl: '36rem',\n        '2xl': '42rem',\n        '3xl': '48rem',\n        '4xl': '56rem',\n        '5xl': '64rem',\n        '6xl': '72rem',\n        '7xl': '80rem',\n      },\n    },\n    rules: [\n      [\n        '@container($|-|\\\\/)',\n        withAutocomplete$(\n          ({ 1: $1, $$ }, context) => {\n            // eslint-disable-next-line no-sparse-arrays\n            const [value = '', name] = $1 == '/' ? [, $$] : parseValue($$)\n\n            const type = arbitrary(value, '', context) || value || 'inline-size'\n\n            return name ? { container: `${name} / ${type}` } : { 'container-type': type }\n          },\n          DEV &&\n            ((match) =>\n              match[1] // we get called 3 times ('', '-', '/') - only answer once\n                ? []\n                : [\n                    { prefix: '@container', suffix: '', modifiers: [] },\n                    { prefix: '@container', suffix: '-normal', modifiers: [] },\n                    { prefix: '@container', suffix: '-size', modifiers: [] },\n                    { prefix: '@container', suffix: '-[', modifiers: [] },\n                  ]),\n        ),\n      ],\n    ],\n    variants: [\n      [\n        '@(.+)',\n        withAutocomplete$(\n          (match, context) => {\n            const [value, name] = parseValue(match[1])\n\n            if (value) {\n              const minWidth =\n                context.theme('containers', value) || arbitrary(value, 'containers', context)\n\n              return minWidth && `@container ${name ? name + ' ' : ''}(min-width:${minWidth})`\n            }\n          },\n          DEV &&\n            ((match, context) => [\n              ...Object.entries(context.theme('containers')).map(([suffix, minWidth]) => ({\n                prefix: '@',\n                suffix,\n                label: `@container (min-width: ${minWidth})`,\n                theme: { section: 'containers', key: suffix },\n                modifiers: [],\n              })),\n              { prefix: '@', suffix: '[', modifiers: [] },\n            ]),\n        ),\n      ],\n    ],\n  }\n}\n"],"names":["presetContainerQueries","theme","containers","xs","sm","md","lg","xl","rules","$1","$$","context","value","name","parseValue","type","arbitrary","container","variants","match","minWidth"],"mappings":";AAgBA,+EAAA;AAce,SAASA,yBAAwD;IAC9E,OAAO;QACLC,OAAO;YACLC,YAAY;gBACVC,IAAI;gBACJC,IAAI;gBACJC,IAAI;gBACJC,IAAI;gBACJC,IAAI;gBACJ,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,OAAO;YACT;QACF;QACAC,OAAO;YACL;gBACE;gBAEE,CAAC,EAAE,GAAGC,GAAAA,EAAIC,GAAE,EAAE,EAAEC,UAAY;;oBAE1B,IAAM,CAACC,QAAQ,EAAE,EAAEC,KAAK,GAAGJ,AAAM,OAANA,KAAY;;wBAAGC;qBAAG,GAAGI,WAAWJ,GAAG,EAExDK,OAAOC,UAAUJ,OAAO,IAAID,YAAYC,SAAS;oBAEvD,OAAOC,OAAO;wBAAEI,WAAW,CAAC,EAAEJ,KAAK,GAAG,EAAEE,KAAK,CAAC;wBAAK;wBAAE,kBAAkBA;qBAAM;;aAalF;SACF;QACDG,UAAU;YACR;gBACE;gBAEE,CAACC,OAAOR,UAAY;oBAClB,IAAM,CAACC,OAAOC,KAAK,GAAGC,WAAWK,KAAK,CAAC,EAAE;oBAEzC,IAAIP,OAAO;wBACT,IAAMQ,WACJT,QAAQV,KAAK,CAAC,cAAcW,UAAUI,UAAUJ,OAAO,cAAcD;wBAEvE,OAAOS,YAAY,CAAC,WAAW,EAAEP,OAAOA,OAAO,MAAM,EAAE,CAAC,WAAW,EAAEO,SAAS,CAAC,CAAC;oBACjF,CAAA;gBACH;aAaH;SACF;IACH;AACF;"}