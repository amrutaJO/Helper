{"version":3,"file":"preset-container-queries.global.dev.js","sources":["../src/container-queries.ts"],"sourcesContent":["import { DEV } from 'distilt/env'\nimport {\n  arbitrary,\n  AutocompleteProvider,\n  BaseTheme,\n  parseValue,\n  Preset,\n  RuleResolver,\n  VariantResolver,\n  withAutocomplete,\n} from '@twind/core'\n\nexport interface ContainerQueriesTheme extends BaseTheme {\n  containers: Record<string, string>\n}\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$<\n  Resolver extends RuleResolver<ContainerQueriesTheme> | VariantResolver<ContainerQueriesTheme>,\n>(resolver: Resolver, autocomplete: AutocompleteProvider<ContainerQueriesTheme> | false): Resolver {\n  if (DEV) {\n    return withAutocomplete(\n      resolver as RuleResolver<ContainerQueriesTheme>,\n      autocomplete,\n    ) as Resolver\n  }\n\n  return resolver\n}\n\nexport default function presetContainerQueries(): Preset<ContainerQueriesTheme> {\n  return {\n    theme: {\n      containers: {\n        xs: '20rem',\n        sm: '24rem',\n        md: '28rem',\n        lg: '32rem',\n        xl: '36rem',\n        '2xl': '42rem',\n        '3xl': '48rem',\n        '4xl': '56rem',\n        '5xl': '64rem',\n        '6xl': '72rem',\n        '7xl': '80rem',\n      },\n    },\n    rules: [\n      [\n        '@container($|-|\\\\/)',\n        withAutocomplete$(\n          ({ 1: $1, $$ }, context) => {\n            // eslint-disable-next-line no-sparse-arrays\n            const [value = '', name] = $1 == '/' ? [, $$] : parseValue($$)\n\n            const type = arbitrary(value, '', context) || value || 'inline-size'\n\n            return name ? { container: `${name} / ${type}` } : { 'container-type': type }\n          },\n          DEV &&\n            ((match) =>\n              match[1] // we get called 3 times ('', '-', '/') - only answer once\n                ? []\n                : [\n                    { prefix: '@container', suffix: '', modifiers: [] },\n                    { prefix: '@container', suffix: '-normal', modifiers: [] },\n                    { prefix: '@container', suffix: '-size', modifiers: [] },\n                    { prefix: '@container', suffix: '-[', modifiers: [] },\n                  ]),\n        ),\n      ],\n    ],\n    variants: [\n      [\n        '@(.+)',\n        withAutocomplete$(\n          (match, context) => {\n            const [value, name] = parseValue(match[1])\n\n            if (value) {\n              const minWidth =\n                context.theme('containers', value) || arbitrary(value, 'containers', context)\n\n              return minWidth && `@container ${name ? name + ' ' : ''}(min-width:${minWidth})`\n            }\n          },\n          DEV &&\n            ((match, context) => [\n              ...Object.entries(context.theme('containers')).map(([suffix, minWidth]) => ({\n                prefix: '@',\n                suffix,\n                label: `@container (min-width: ${minWidth})`,\n                theme: { section: 'containers', key: suffix },\n                modifiers: [],\n              })),\n              { prefix: '@', suffix: '[', modifiers: [] },\n            ]),\n        ),\n      ],\n    ],\n  }\n}\n"],"names":["twind","presetContainerQueries","core","withAutocomplete$","resolver","autocomplete","withAutocomplete","theme","containers","xs","sm","md","lg","xl","rules","$1","$$","context","value","name","parseValue","type","arbitrary","container","match","prefix","suffix","modifiers","variants","minWidth","Object","entries","map","label","section","key"],"mappings":"AAgBA,IAAA,CAAAA,KAAA,CAAA,IAAA,CAAAA,KAAA,EAAA,CAAA,EAAA,IAAA,CAAAA,KAAA,CAAAC,sBAAA,CAAA,AAAA,SAAAC,CAAA,CAAA,CAAA,aACA,SAASC,EAEPC,CAAkB,CAAEC,CAAiE,CAAY,CAE/F,OAAOC,mBACLF,EACAC,EAKN,CAyEA,OAvEe,UAAiE,CAC9E,MAAO,CACLE,MAAO,CACLC,WAAY,CACVC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJ,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,QACP,MAAO,OACT,CACF,EACAC,MAAO,CACL,CACE,sBACAX,EACE,CAAC,CAAE,EAAGY,CAAAA,CAAIC,GAAAA,CAAE,CAAE,CAAEC,IAAY,CAE1B,GAAM,CAACC,EAAQ,EAAE,CAAEC,EAAK,CAAGJ,AAAM,KAANA,EAAY,EAAGC,EAAG,CAAGI,EAAAA,WAAWJ,EAAG,CAExDK,EAAOC,EAAAA,SAAAA,CAAUJ,EAAO,GAAID,IAAYC,GAAS,cAEvD,OAAOC,EAAO,CAAEI,UAAW,CAAC,EAAEJ,EAAK,GAAG,EAAEE,EAAK,CAAC,EAAK,CAAE,iBAAkBA,EAAM,AAC/E,EAEG,AAACG,GACAA,CAAK,CAAC,EAAE,CACJ,EAAE,CACF,CACE,CAAEC,OAAQ,aAAcC,OAAQ,GAAIC,UAAW,EAAE,AAAC,EAClD,CAAEF,OAAQ,aAAcC,OAAQ,UAAWC,UAAW,EAAE,AAAC,EACzD,CAAEF,OAAQ,aAAcC,OAAQ,QAASC,UAAW,EAAE,AAAC,EACvD,CAAEF,OAAQ,aAAcC,OAAQ,KAAMC,UAAW,EAAE,AAAC,EACrD,EAEZ,CACF,CACDC,SAAU,CACR,CACE,QACAzB,EACE,CAACqB,EAAOP,IAAY,CAClB,GAAM,CAACC,EAAOC,EAAK,CAAGC,EAAWI,UAAAA,CAAAA,CAAK,CAAC,EAAE,EAEzC,GAAIN,EAAO,CACT,IAAMW,EACJZ,EAAQV,KAAK,CAAC,aAAcW,IAAUI,EAAAA,SAAAA,CAAUJ,EAAO,aAAcD,GAEvE,OAAOY,GAAY,CAAC,WAAW,EAAEV,EAAOA,EAAO,IAAM,EAAE,CAAC,WAAW,EAAEU,EAAS,CAAC,CAAC,AACjF,CAAA,EAGA,CAACL,EAAOP,IAAY,IAChBa,OAAOC,OAAO,CAACd,EAAQV,KAAK,CAAC,eAAeyB,GAAG,CAAC,CAAC,CAACN,EAAQG,EAAS,GAAM,CAAA,CAC1EJ,OAAQ,IACRC,OAAAA,EACAO,MAAO,CAAC,uBAAuB,EAAEJ,EAAS,CAAC,CAAC,CAC5CtB,MAAO,CAAE2B,QAAS,aAAcC,IAAKT,CAAO,EAC5CC,UAAW,EAAE,IAEf,CAAEF,OAAQ,IAAKC,OAAQ,IAAKC,UAAW,EAAE,AAAC,EAC3C,EAEN,CACF,AACH,CACF,CAAA,EAAA3B,MAAAE,IAAA"}