import { withAutocomplete, parseValue, arbitrary } from '@twind/core';
function presetContainerQueries() {
    return {
        theme: {
            containers: {
                xs: '20rem',
                sm: '24rem',
                md: '28rem',
                lg: '32rem',
                xl: '36rem',
                '2xl': '42rem',
                '3xl': '48rem',
                '4xl': '56rem',
                '5xl': '64rem',
                '6xl': '72rem',
                '7xl': '80rem'
            }
        },
        rules: [
            [
                '@container($|-|\\/)',
                // indirection wrapper to remove autocomplete functions from production bundles
                withAutocomplete(({ 1: $1 , $$  }, context)=>{
                    // eslint-disable-next-line no-sparse-arrays
                    let [value = '', name] = '/' == $1 ? [
                        ,
                        $$
                    ] : parseValue($$), type = arbitrary(value, '', context) || value || 'inline-size';
                    return name ? {
                        container: `${name} / ${type}`
                    } : {
                        'container-type': type
                    };
                }, (match)=>match[1] ? // we get called 3 times ('', '-', '/') - only answer once
                    [] : [
                        {
                            prefix: '@container',
                            suffix: '',
                            modifiers: []
                        },
                        {
                            prefix: '@container',
                            suffix: '-normal',
                            modifiers: []
                        },
                        {
                            prefix: '@container',
                            suffix: '-size',
                            modifiers: []
                        },
                        {
                            prefix: '@container',
                            suffix: '-[',
                            modifiers: []
                        }
                    ])
            ]
        ],
        variants: [
            [
                '@(.+)',
                withAutocomplete((match, context)=>{
                    let [value, name] = parseValue(match[1]);
                    if (value) {
                        let minWidth = context.theme('containers', value) || arbitrary(value, 'containers', context);
                        return minWidth && `@container ${name ? name + ' ' : ''}(min-width:${minWidth})`;
                    }
                }, (match, context)=>[
                        ...Object.entries(context.theme('containers')).map(([suffix, minWidth])=>({
                                prefix: '@',
                                suffix,
                                label: `@container (min-width: ${minWidth})`,
                                theme: {
                                    section: 'containers',
                                    key: suffix
                                },
                                modifiers: []
                            })),
                        {
                            prefix: '@',
                            suffix: '[',
                            modifiers: []
                        }
                    ])
            ]
        ]
    };
}
export { presetContainerQueries as default };
//# sourceMappingURL=preset-container-queries.dev.js.map
