import { BaseTheme, ThemeFunction, ExtractUserTheme, TwindConfig, Twind, Preset, TwindUserConfig, ExtractThemes } from '@twind/core';
import { Numberify, RGBA } from '@ctrl/tinycolor';

declare type LanguageId = ('html' | 'javascript' | 'javascriptreact' | 'markdown' | 'svelte' | 'typescript' | 'typescriptreact' | 'vue-html' | 'vue') | (string & {});
interface Intellisense<Theme extends BaseTheme = BaseTheme> {
    readonly theme: ThemeFunction<ExtractUserTheme<Theme>>;
    readonly config: TwindConfig<Theme>;
    suggest(input: string, options?: SuggestAtOptions): Promise<Suggestion[]>;
    suggestAt(content: string, offset: number, language: LanguageId): Promise<SuggestionAt | null>;
    documentationFor(token: string, options?: DocumentationForOptions): Promise<string | null>;
    documentationAt(content: string, offset: number, language: LanguageId): Promise<DocumentationAt | null>;
    collectColors(content: string, language: LanguageId): Promise<ColorInformation[]>;
    validate(content: string, language: LanguageId): Promise<Diagnostics[]>;
    enumerate(): IterableIterator<Suggestion>;
}
interface DocumentationForOptions {
    format?: 'md' | 'html';
}
interface Diagnostics {
    code: 'invalidVariant' | 'invalidClass' | 'invalidCSS';
    severity: 'hint' | 'info' | 'warning' | 'error';
    value: string;
    message: string;
    start: number;
    end: number;
    suggestions?: [];
    related?: RelatedDiagnostic[];
}
interface RelatedDiagnostic {
    resource: string;
    message: string;
    start: number;
    end: number;
}
interface DocumentationAt {
    start: number;
    end: number;
    value: string;
}
interface ColorInformation {
    start: number;
    end: number;
    value: string;
    rgba: Numberify<RGBA>;
    editable?: boolean;
}
interface SuggestAtOptions {
    prefix?: string;
    ignore?: string[];
}
interface SuggestionAt {
    start: number;
    end: number;
    suggestions: Suggestion[];
}
interface SuggestionCommon {
    /** The full name of the suggested value */
    name: string;
    /** The value as it will be used in this context */
    value: string;
    /** Short info to be displayed inline */
    description?: string;
    detail?: string;
    color?: string;
}
interface SuggestionVariant extends SuggestionCommon {
    type: 'variant';
}
interface SuggestionClass extends SuggestionCommon {
    type: 'class';
}
declare type Suggestion = SuggestionClass | SuggestionVariant;
interface IntellisenseOptions {
    cache?: {
        /**
        The maximum number of milliseconds an item should remain in the cache.
    
        @default Infinity
    
        By default, `maxAge` will be `Infinity`, which means that items will never expire.
        Lazy expiration upon the next write or read call.
    
        Individual expiration of an item can be specified by the `set(key, value, maxAge)` method.
        */
        readonly maxAge?: number;
        /**
        The maximum number of items before evicting the least recently used items.
    
        @default 1000
        */
        readonly maxSize: number;
    };
    mdnOrigin?: string;
}

declare function createIntellisense<Theme extends BaseTheme = BaseTheme>(twind: Twind<Theme>, options?: IntellisenseOptions): Intellisense<Theme>;
declare function createIntellisense<Theme extends BaseTheme = BaseTheme>(config: TwindConfig<Theme>, options?: IntellisenseOptions): Intellisense<Theme>;
declare function createIntellisense<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>(config: TwindUserConfig<Theme, Presets>, options?: IntellisenseOptions): Intellisense<BaseTheme & ExtractThemes<Theme, Presets>>;

export { ColorInformation, Diagnostics, DocumentationAt, DocumentationForOptions, Intellisense, IntellisenseOptions, LanguageId, RelatedDiagnostic, SuggestAtOptions, Suggestion, SuggestionAt, SuggestionClass, SuggestionCommon, SuggestionVariant, createIntellisense };
//# sourceMappingURL=intellisense.d.ts.map
